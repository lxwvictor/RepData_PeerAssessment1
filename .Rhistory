f <- function(day) {
if(grep(day, c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) > 0)
return("Weekday")
else
return("Weekend)
}
if(grep(day, c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) > 0)
return("Weekday")
if(grep("Monday", c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) > 0)
== T
if(grep("Monday", c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) > 0) == T
if(grep("Monday", c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) > 0) == TRUE
grep("Monday", c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) > 0
if(grep("Monday", c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) > 0) print("a")
f <- function(day) {
if(grep(day, c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) > 0) return("Weekday")
else return("weekend")
}
if(grep("Monday", c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) > 0) print("a")
f("Monday")
f("Moy")
f("tuesday")
f("Tuesday")
f("Wednesday")
f("Thursday")
f("Friday")
f("Saturday")
?grepl
activity$daytype <- weekdays(activity$date)
activity <- read.csv("./activity.csv", stringsAsFactors = F)
activity$date <- as.Date(activity$date, format = "%Y-%m-%d")
activity$interval <- sprintf("%04d", activity$interval)
```
## What is mean total number of steps taken per day?
Aggregate the data frame by date and apply functino of sum. A new data frame "actDay" is created.
```{r, echo = T}
actDay <- aggregate(steps ~ date, data = activity, FUN = sum, na.action = na.omit)
```
Plot the histogram of total steps taken per day.
```{r, echo = T}
hist(actDay$steps, breaks = nrow(actDay), xlab = "Total steps of a day",
ylab = "Number of days", main = "Total Number of steps taken per day")
```
The mean and median of the total number of steps taken per day as show by the code and results below.
```{r, echo = T}
print(meanNum <- mean(actDay$steps))
print(medianNum <- median(actDay$steps))
```
## What is the average daily activity pattern?
Aggregate the data frame by interval and apply function of mean. A new data frame "actInv" is created.
setwd("./Chapter5.Reproducible_Research/")
setwd("./Chapter5Assignment1/")
activity <- read.csv("./activity.csv", stringsAsFactors = F)
activity$date <- as.Date(activity$date, format = "%Y-%m-%d")
activity$interval <- sprintf("%04d", activity$interval)
```
## What is mean total number of steps taken per day?
Aggregate the data frame by date and apply functino of sum. A new data frame "actDay" is created.
```{r, echo = T}
actDay <- aggregate(steps ~ date, data = activity, FUN = sum, na.action = na.omit)
```
Plot the histogram of total steps taken per day.
```{r, echo = T}
hist(actDay$steps, breaks = nrow(actDay), xlab = "Total steps of a day",
ylab = "Number of days", main = "Total Number of steps taken per day")
```
The mean and median of the total number of steps taken per day as show by the code and results below.
```{r, echo = T}
print(meanNum <- mean(actDay$steps))
print(medianNum <- median(actDay$steps))
```
## What is the average daily activity pattern?
Aggregate the data frame by interval and apply function of mean. A new data frame "actInv" is created.
```{r, echo = T}
actInv <- aggregate(steps ~ interval, data = activity, FUN = mean, na.action = na.omit)
```
Make a time series plot of the 5-minute interval and the average number of steps teake across all days.
```{r, echo = T}
plot(actInv$interval, actInv$steps, type = "l", xlab = "Time Interval in 5 minutes",
ylab = "Average Number of Steps in 5-minute across all days", main = "Average Daily Activity Pattern")
```
The 5-minute interval contains the maximum number of steps shown by the code and result below. "0835" in the output means the time interval  from "08:35" to "08:40"
```{r, echo = T}
print(actInv[which(actInv$steps == max(actInv$steps)), "interval"])
```
## Inputing missing values
The number of missing values in the dataset can be calculated by using "complete.cases" function. There are 2304 missing values.
```{r, echo = T}
comCases <- complete.cases(activity)
numNA <- nrow(activity) - sum(comCases)
print(numNA)
```
Considering people usually have difference activity patterns in weekdays and weekends, and extreme values in a sample alway contriute a lot to the mean value of the sample. I use the median value of the interval of that specific day to fill in the missing values. In particular, a missing value on Monday for interval 08:00 to 08:05 will be filled by the median value of steps for 08:00 to 08:05 of all Mondays.
A "day" column is appeneded to the exsiting "activity" data frame. I create an "actInv2" data frame by aggregating the steps by interval and day, function applied is median. Then based on the strategy explained in previous paragraph I find the steps of a specific interval and day to replace the missing value.
```{r}
activity2 <- activity
activity2$day <- weekdays(activity2$date)
actInv2 <- aggregate(steps ~ interval + day, data = activity2, FUN = median)
inComAct <- activity2[!comCases, ]
for(i in 1:numNA) {
inComAct$steps[i] <- actInv2[which(actInv2$interval == inComAct$interval[i] &
actInv2$day == inComAct$day[i]), "steps"]
}
activity2[!comCases, "steps"] <- inComAct$steps
```
The data frame "actDay2" is created by aggregating the steps by column day. Histograms of the total number of steps taken each days shown as below.
```{r}
actDay2 <- aggregate(steps ~ date, data = activity2, FUN = sum)
hist(actDay2$steps, breaks = nrow(actDay2), xlab = "Total steps of a day",
ylab = "Total number of days", main = "Total number of steps taken per day")
```
The mean and median of the total number of steps taken per day as show by the code and results below.
```{r, echo = T}
print(meanNum <- mean(actDay2$steps))
print(medianNum <- median(actDay2$steps))
```
The mean and median values both differ from the previous part of the assignment because of the filled in values. In particular, both decreased in this case.
## Are there differences in activity patterns between weekdays and weekends?
```{r}
activity$daytype <- weekdays(activity$date)
head(activity)
?grepl
grepl("abd", "ab", "fs")
grep("abd", "ab", "fs")
?gsub
gsub("asd", "asdf", "asdfg")
gsub(c("Monday", "Tuesday"), "Monday", "weekday")
gsub(c("Monday", "Tuesday"), c("Monday", "Tuesday", "weekday")
)
gsub(c("Monday", "Tuesday"), c("Monday", "Tuesday"), "weekday")
gsub(c("Monday", "Tuesday"), c("Tuesday"), "weekday")
head(activity, 100)
gsub(c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), "Weekday", activity$daytype, ignore.case = TRUE)
activity$daytype <- weekdays(activity$date)
activity$daytype <- weekdays(activity$date)
gsub(c("Monday", "Weekday", activity$daytype, ignore.case = TRUE)
gsub(c("Tuesday", "Weekday", activity$daytype, ignore.case = TRUE)
gsub(c("Wednesday", "Weekday", activity$daytype, ignore.case = TRUE)
gsub(c("Thursday", "Weekday", activity$daytype, ignore.case = TRUE)
gsub(c("Friday", "Weekday", activity$daytype, ignore.case = TRUE)
gsub(c("Saturday", "Weekend", activity$daytype, ignore.case = TRUE)
gsub(c("Sunday", "Weekend", activity$daytype, ignore.case = TRUE)
gsub(c("Monday", "Weekday", activity$daytype, ignore.case = TRUE)
gsub("Monday", "Weekday", activity$daytype, ignore.case = TRUE)
gsub("Tuesday", "Weekday", activity$daytype, ignore.case = TRUE)
gsub("Wednesday", "Weekday", activity$daytype, ignore.case = TRUE)
gsub("Thursday", "Weekday", activity$daytype, ignore.case = TRUE)
gsub("Friday", "Weekday", activity$daytype, ignore.case = TRUE)
gsub("Saturday", "Weekend", activity$daytype, ignore.case = TRUE)
gsub("Sunday", "Weekend", activity$daytype, ignore.case = TRUE)
activity$daytype <- weekdays(activity$date)
activity$daytype <- gsub("Monday", "Weekday", activity$daytype, ignore.case = TRUE)
activity$daytype <- gsub("Tuesday", "Weekday", activity$daytype, ignore.case = TRUE)
activity$daytype <- gsub("Wednesday", "Weekday", activity$daytype, ignore.case = TRUE)
activity$daytype <- gsub("Thursday", "Weekday", activity$daytype, ignore.case = TRUE)
activity$daytype <- gsub("Friday", "Weekday", activity$daytype, ignore.case = TRUE)
activity$daytype <- gsub("Saturday", "Weekend", activity$daytype, ignore.case = TRUE)
activity$daytype <- gsub("Sunday", "Weekend", activity$daytype, ignore.case = TRUE)
head(activity$daytype)
str(activity)
source('~/.active-rstudio-document', echo=TRUE)
activity$daytype <- as.factor(activity$daytype)
activity$daytype <- as.factor(activity$daytype)
str(activity)
head(activity)
summary(activity)
summary(activity$daytype)
library(lattice)
actInv3 <- aggregate(steps ~ interval + daytype, data = activity)
actInv3 <- aggregate(steps ~ interval + daytype, data = activity, FUN = mean)
actInv3
xyplot(steps ~ interval | daytype, data = activity, layout = c(2,1))
xyplot(steps ~ interval | daytype, data = actInv3, layout = c(2,1))
actInv3
xyplot(steps ~ interval | daytype, data = actInv3, layout = c(1,2))
str(actInv3)
xyplot(steps ~ interval, data = actInv3)
?transform
transform(actInv3)
library(dataset2)
library(datasets)
xyplot(Ozone ~ Wind)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(interval ~ steps, data = actInv3)
plot(interval ~ steps)
plot(interval ~ steps, data = actInv3)
plot(steps ~ interval, data = actInv3)
plot(steps ~ interval, data = actInv3, type = "l")
plot(steps ~ interval, data = actInv3, type = "l")
xyplot(steps ~ interval, data = actInv3, type = "l")
xyplot(steps ~ interval, data = actInv3)
xyplot(steps ~ daytype, data = actInv3)
xyplot(steps ~ daytype, data = actInv3, type = "l")
xyplot(steps ~ interval, data = actInv3, type = "l")
?xyplot
xyplot(steps | daytype, data = actInv3, type = "l")
head(actInv3)
xyplot(steps | daytype, data = actInv3, type = "l")
xyplot(interval | daytype, data = actInv3, type = "l")
xyplot(actInv3$interval | daytype, data = actInv3, type = "l")
xyplot(actInv3$steps | actiInv3$daytype, data = actInv3, type = "l")
xyplot(actInv3$steps | actInv3$daytype, data = actInv3, type = "l")
str(actInv3)
xyplot(actInv3$steps ~ actInv3$daytype, data = actInv3, type = "l")
xyplot(actInv3$steps ~ actInv3$interval, data = actInv3, type = "l")
actInv3
plot(actInv3$steps ~ actInv3$interval)
xyplot(actInv3$steps ~ actInv3$interval)
str(actInv3$steps)
str(actInv3$interval)
xyplot(steps ~ interval, actInv3)
xyplot(steps ~ interval, actInv3, type = "l")
xyplot(steps ~ daytype, actInv3, type = "l")
xyplot(daytype ~ interval, actInv3, type = "l")
xyplot(daytype ~ steps, actInv3, type = "l")
xyplot(interval ~ steps, actInv3, type = "l")
actInv3$steps
str(actInv3$steps)
class(actInv3$steps)
xyplot(interval ~ steps, actInv3, type = "l")
actInv2$steps
xyplot(actInv2$interval ~ actInv2$steps, type = "l")
str(actInv2$steps)
st <- actInv3[1:100, ]
inv <- actInv3[1:100, 1]
st <- actInv3[1:100, 3]
inv
st
xyplot(inv~st)
xyplot(st ~ inv)
st <- rep(1:2, 50)
st
xyplot(inv~st)
xyplot(st~inv)
st <- factor(st)
xyplot(st~inv)
st <- charater(st)
